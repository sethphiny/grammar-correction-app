FROM node:20-alpine

# Set working directory
WORKDIR /app

# Install wget for health checks and enable corepack (pnpm)
RUN apk add --no-cache wget && corepack enable && corepack prepare pnpm@9.0.0 --activate

# Accept build-time API base URL for CRA
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=${REACT_APP_API_URL}

# Copy package manager files
COPY frontend/package.json ./
COPY frontend/pnpm-lock.yaml* ./

# Install dependencies with pnpm (faster, deterministic)
# Use npm as fallback if pnpm-lock.yaml doesn't exist
RUN if [ -f pnpm-lock.yaml ]; then \
        pnpm install --frozen-lockfile; \
    else \
        npm install --legacy-peer-deps && \
        npm install ajv@^8.0.0 --save-dev --legacy-peer-deps; \
    fi

# Copy source code (explicit copy to ensure all files are included on all platforms)
COPY frontend/public ./public
COPY frontend/src ./src
COPY frontend/tsconfig.json ./tsconfig.json
COPY frontend/tailwind.config.js ./tailwind.config.js
COPY frontend/postcss.config.js ./postcss.config.js

# Verify public folder exists (debugging)
RUN ls -la /app/public || echo "Public folder not found!"

# Build the application (CRA reads REACT_APP_* at build time)
RUN if [ -f pnpm-lock.yaml ]; then \
        pnpm run build; \
    else \
        npm run build; \
    fi

# Install serve to run the production build
# Use npm for global installation as pnpm requires additional setup for global packages
RUN npm install -g serve

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Start the application
CMD ["serve", "-s", "build", "-l", "3000"]
