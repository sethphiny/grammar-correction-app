services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates (if using HTTPS)
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    environment:
      - LANGUAGETOOL_URL=http://languagetool:8010
      - MAX_FILE_SIZE=10485760
      - PROCESSING_TIMEOUT=300
      - CORS_ORIGINS=http://localhost,https://yourdomain.com
      - PYTHONUNBUFFERED=1
    volumes:
      - backend_uploads:/app/uploads
      - backend_temp:/app/temp_files
    depends_on:
      languagetool:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        # Frontend will call API via nginx at /api
        REACT_APP_API_URL: http://localhost/api
    environment:
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  languagetool:
    image: silviof/docker-languagetool:latest
    environment:
      - LANGUAGETOOL_OPTS=-Xmx2g
    volumes:
      - languagetool_data:/languagetool
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/v2/languages"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

networks:
  app-network:
    driver: bridge

volumes:
  backend_uploads:
  backend_temp:
  languagetool_data:
  redis_data:
